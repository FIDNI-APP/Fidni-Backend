name: Deploy to AWS ECR and EC2

on:
  push:
    branches: [main, master]

env:
  AWS_REGION: eu-west-3
  ECR_REPOSITORY: fidni-backend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run tests
      run: python manage.py test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    environment: production
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
    - uses: actions/checkout@v4
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Extract metadata
      id: meta
      run: |
        echo "tags=${{ secrets.AWS_ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "latest=${{ secrets.AWS_ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest" >> $GITHUB_OUTPUT
    
    - name: Build and push Docker image
      run: |
        docker build -t ${{ steps.meta.outputs.tags }} -t ${{ steps.meta.outputs.latest }} .
        docker push ${{ steps.meta.outputs.tags }}
        docker push ${{ steps.meta.outputs.latest }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Generate deployment script
      run: |
        cat > deploy.sh << 'EOF'
        #!/bin/bash -e
        
        IMAGE_TAG="$1"
        SERVICE_NAME="fidni-backend"
        
        echo "Deploying image: $IMAGE_TAG"
        
        # Configure AWS using environment variables
        export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
        export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
        export AWS_DEFAULT_REGION="$AWS_REGION"
        
        # Login to ECR
        aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$ECR_REGISTRY"
        
        # Pull new image
        docker pull "$IMAGE_TAG"
        
        # Stop existing container gracefully
        if docker ps | grep -q "$SERVICE_NAME"; then
            echo "Stopping existing container..."
            docker stop "$SERVICE_NAME" || true
            docker rm "$SERVICE_NAME" || true
        fi
        
        # Start new container
        docker run -d \
            --name "$SERVICE_NAME" \
            -p 80:8000 \
            --restart unless-stopped \
            -v /home/ubuntu/app-data:/app/data \
            "$IMAGE_TAG"
        
        # Health check
        echo "Waiting for service to start..."
        sleep 10
        
        if ! docker ps | grep -q "$SERVICE_NAME"; then
            echo "Deployment failed - container not running"
            exit 1
        fi
        
        # Cleanup old images (keep last 3)
        docker images "$ECR_REGISTRY/$ECR_REPOSITORY" --format "table {{.Tag}}\t{{.ID}}" | tail -n +4 | awk '{print $2}' | xargs -r docker rmi || true
        
        echo "Deployment completed successfully!"
        EOF

    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        IMAGE_TAG: ${{ needs.build-and-push.outputs.image-tag }}
      run: |
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        
        # Copy deployment script
        scp -o StrictHostKeyChecking=no -i private_key.pem \
            deploy.sh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/
        
        # Execute deployment
        ssh -o StrictHostKeyChecking=no -i private_key.pem \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
            "export ECR_REGISTRY='${{ secrets.AWS_ECR_REGISTRY }}' && \
             export ECR_REPOSITORY='${{ env.ECR_REPOSITORY }}' && \
             export AWS_REGION='${{ env.AWS_REGION }}' && \
             export AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}' && \
             export AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}' && \
             bash /tmp/deploy.sh '${{ env.IMAGE_TAG }}'"
        
        rm private_key.pem

    - name: Verify deployment
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
      run: |
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        
        ssh -o StrictHostKeyChecking=no -i private_key.pem \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
            "docker ps --filter name=fidni-backend --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'"
        
        rm private_key.pem