name: Deploy to AWS ECR and EC2

on:
  push:
    branches: [main, master]

env:
  AWS_REGION: eu-west-3
  ECR_REPOSITORY: fidni-backend
  
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run tests
      run: python manage.py test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    environment: production
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Generate image metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:buildcache
        cache-to: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:buildcache,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
      run: |
        # Setup SSH
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        
        # Create deployment script
        cat > deploy.sh << 'EOF'
        #!/bin/bash -ex
        
        # Exit on error
        set -e
        
        # Install Docker if needed
        if ! command -v docker &> /dev/null; then
          echo "Installing Docker..."
          sudo apt update
          sudo apt install -y docker.io
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo usermod -aG docker ubuntu
          newgrp docker
        fi
        
        # Configure AWS CLI
        export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
        export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
        export AWS_DEFAULT_REGION="${AWS_REGION}"
        
        # Login to ECR
        aws ecr get-login-password --region "${AWS_REGION}" | docker login --username AWS --password-stdin "${ECR_REGISTRY}"
        
        # Pull the latest image
        docker pull "${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"
        
        # Stop existing container if running
        docker stop fidni-backend 2>/dev/null || true
        docker rm fidni-backend 2>/dev/null || true
        
        # Run new container with environment variables
        docker run -d \
          --name fidni-backend \
          -p 80:8000 \
          --restart unless-stopped \
          -e SECRET_KEY="${SECRET_KEY}" \
          -e DEBUG="${DEBUG}" \
          -e ALLOWED_HOSTS="${ALLOWED_HOSTS}" \
          -e DATABASE_URL="${DATABASE_URL}" \
          -v /home/ubuntu/fidni-data:/app/data \
          -v /home/ubuntu/fidni-media:/app/media \
          -v /home/ubuntu/fidni-static:/app/static \
          "${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"
        
        # Run migrations
        docker exec fidni-backend python manage.py migrate --noinput
        
        # Collect static files
        docker exec fidni-backend python manage.py collectstatic --noinput
        
        # Clean up old images
        docker image prune -af
        
        echo "Deployment completed successfully!"
        EOF
        
        # Copy and execute deployment script
        scp -o StrictHostKeyChecking=no -i private_key.pem \
          deploy.sh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/
        
        ssh -o StrictHostKeyChecking=no -i private_key.pem \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
          "AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}' \
           AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
           AWS_REGION='${{ env.AWS_REGION }}' \
           ECR_REGISTRY='${ECR_REGISTRY}' \
           ECR_REPOSITORY='${{ env.ECR_REPOSITORY }}' \
           SECRET_KEY='${{ secrets.DJANGO_SECRET_KEY }}' \
           DEBUG='${{ secrets.DJANGO_DEBUG }}' \
           ALLOWED_HOSTS='${{ secrets.DJANGO_ALLOWED_HOSTS }}' \
           DATABASE_URL='${{ secrets.DATABASE_URL }}' \
           bash /tmp/deploy.sh"
        
        # Cleanup
        rm -f private_key.pem

    - name: Health check
      run: |
        sleep 10
        curl -f http://${{ secrets.EC2_HOST }}/health/ || exit 1