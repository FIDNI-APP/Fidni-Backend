name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:

env:
  ECR_REPOSITORY: fidni-backend
  AWS_REGION: us-east-1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run tests
        run: echo "Insert your test commands here"

  build-and-push:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG

      - name: Deploy to EC2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          REMOTE_DIR=/home/ubuntu/Fidni-Backend

          # Copy docker-compose.yml
          scp -o StrictHostKeyChecking=no -i private_key.pem docker-compose.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:$REMOTE_DIR/

          # Create and copy .env file with tag
          echo "ECR_REGISTRY=$ECR_REGISTRY" > .env.deploy
          echo "ECR_REPOSITORY=${{ env.ECR_REPOSITORY }}" >> .env.deploy
          echo "IMAGE_TAG=$IMAGE_TAG" >> .env.deploy
          scp -o StrictHostKeyChecking=no -i private_key.pem .env.deploy ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:$REMOTE_DIR/.env

          # SSH and deploy
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          set -ex
          cd /home/ubuntu/Fidni-Backend

          # Login to ECR (instance uses IAM role)
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY

          docker-compose down
          docker-compose pull
          docker-compose up -d

          docker image prune -af
          EOF

          rm -f private_key.pem .env.deploy
          echo "Deployment completed successfully."